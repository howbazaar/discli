#! /usr/bin/env python3

import argparse
import json
import os
import re
import time
import os.path
import glob
import requests
import sys
import textwrap
import yaml
from urllib.parse import urljoin


dotfile = ".discli"


class DiscourseHelper:

    def __init__(self):
        parser = argparse.ArgumentParser(
            description='Helper to work with discourse files locally',
            usage=textwrap.dedent('''
                discli <command> [<args>]

                The commands are:
                   init      Record your api key and target discourse
                   get       Get the file
                   put       Put a file back
                   get_posts_in_category  Get all the posts in the given category name
                '''))
        parser.add_argument('command', help='Subcommand to run')
        # parse_args defaults to [1:] for args, but you need to
        # exclude the rest of the args too, or validation will fail
        args = parser.parse_args(sys.argv[1:2])
        if not hasattr(self, args.command):
            print('Unrecognized command')
            parser.print_help()
            exit(1)
        # use dispatch pattern to invoke method with same name
        getattr(self, args.command)()

    @property
    def _identity_path(self):
        return os.path.expanduser("~/.local/share/discli")

    @property
    def _identity_file(self):
        return os.path.join(self._identity_path, 'identity')

    @property
    def identity(self):
        # TODO: cached property?
        with open(self._identity_file) as f:
            return yaml.load(f)

    @property
    def api_auth(self):
        identity = self.identity
        return {'api_key': identity['api-key'], 'api_username': identity['username']}

    @property
    def discourse_url(self):
        return self.identity['url']

    def init(self):
        parser = argparse.ArgumentParser(
            description='Record your api key and target discourse')
        parser.add_argument("url", help="discourse url")
        parser.add_argument("username", help="discourse username")
        parser.add_argument("api_key", help="discourse api key")
        args = parser.parse_args(sys.argv[2:])
        # TODO: optional file for identity to allow multiple discourses
        os.makedirs(self._identity_path, exist_ok=True)
        with open(self._identity_file, 'w') as f:
            yaml.dump({
                'api-key': args.api_key,
                'username': args.username,
                'url': args.url,
            }, f, default_flow_style=False)
        print("Values set: {}".format(self.identity))

    def get(self):
        parser = argparse.ArgumentParser(
            description='get a single post')
        parser.add_argument("topic", help="topic id of the discourse post", type=int)
        args = parser.parse_args(sys.argv[2:])
        self.save_topic_as_file(args.topic)
    
    def save_topic_as_file(self, topic_id):
        post_id = self.get_topic_first_post(topic_id)
        data = self.get_post(post_id)
        slug = data['topic_slug']
        id = data['id']
        filename = f"{topic_id}-{slug}.md"
        metadata = {
            'id': id,
            'slug': slug,
            'filename': filename,
            'updated_at': data['updated_at'],
        }
        self.update_metadata(topic_id, metadata)

        print(f"Saving {filename}")
        with open(filename, "w") as f:
            content = data['raw']
            if content[-1] != '\n':
                content += '\n'
            f.write(content)

    def put(self):
        parser = argparse.ArgumentParser(
            description='get a single post')
        parser.add_argument("topic", help="topic id or filename of the discourse post")
        args = parser.parse_args(sys.argv[2:])

        topic_id, local = self.get_topic_metadata(args.topic)
        data = self.get_post(local['id'])

        if data['updated_at'] != local['updated_at']:
            raise RuntimeError("topic was updated at {} within discourse, aborting".format(data['updated_at']))
        filename = local['filename']
        with open(filename) as f:
            content = f.read()
            self.put_post(local['id'], content)
        self.update_metadata(topic_id, None)
        os.remove(filename)

    def get_post(self, id):
        response = self.request(f"posts/{id}.json")
        if response.status_code == 200:
            return json.loads(response.text)
        raise RuntimeError("couldn't get post {}: status code {}", id, response.status_code)

    def get_posts_in_category(self):
        """
        Get all the posts in a category
        """

        parser = argparse.ArgumentParser(description='get all posts in category')
        parser.add_argument("category", help="name of the category to get posts from", type=str)
        args = parser.parse_args(sys.argv[2:])

        for page in range(1, 20):
            print(f"Getting page {page} of results...")
            response = self.request(f"/search.json?q=category%3A{args.category}&page={page}")

            if response.status_code != 200:
                raise RuntimeError("couldn't get category posts {}: status code {}", id, response.status_code)

            results = response.json()

            if 'topics' not in results:
                break

            topics = results['topics']

            for topic in topics:
                if glob.glob(f"{topic['id']}-*.md"):
                    print(f"File for topic {topic['id']} already exists. Skipping.")
                    continue

                self.save_topic_as_file(topic["id"])

    def request(self, path):
        """
        Use requests to fetch an API URL,
        padding in the auth token,
        and retrying if we get a 429 response
        """

        response = None

        while response is None or response.status_code == 429:
            if response is not None and response.status_code == 429:
                seconds = 5
                error_message = response.json()["errors"][0]
                seconds_match = re.search("wait (\d+) seconds", error_message)

                if seconds_match:
                    seconds = int(seconds_match.groups()[0]) + 1

                print(
                    f"  > 429 from API, waiting {seconds} seconds ... "
                    f"('{response.json()['errors']}')"
                )
                time.sleep(seconds)

            response = requests.get(urljoin(self.identity["url"], path), params=self.api_auth)

        return response

    def put_post(self, id, content):
        post_path = urljoin(self.identity["url"], f"posts/{id}.json")

        data = self.api_auth
        data["post[raw]"] = content
        resp = requests.put(post_path, data=data)
        if resp.status_code != 200:
            raise RuntimeError("couldn't update post {}: status code {}", id, r.status_code)

    def get_topic_first_post(self, id):
        r = self.request(f"t/{id}.json")
        if r.status_code == 200:
            topic = json.loads(r.text)
            first_post = topic['post_stream']['posts'][0]
            return first_post['id']
        raise RuntimeError("couldn't get topic {}: status code {}", id, r.status_code)

    def update_metadata(self, post, data):
        info = self.dotfile_contents()
        if data is None:
            del info[post]
        else:
            info[post] = data
        with open(dotfile, "w") as f:
            yaml.dump(info, f, default_flow_style=False)

    def dotfile_contents(self):
        if not os.path.exists(dotfile):
            return {}
        with open(dotfile) as f:
            return yaml.load(f)

    def read_metadata(self, post):
        info = self.dotfile_contents()
        if post in info:
            return info[post]
        return {}

    def get_topic_metadata(self, topic):
        # topic is either the topic number or the name of the file.
        info = self.dotfile_contents()
        try:
            topic_id = int(topic)
            return topic_id, info[topic_id] 
        except:
            for id, meta in info.items():
                if meta['filename'] == topic:
                    return id, meta

        raise RuntimeError(f"{topic} is neither a topic id nor a known filename")


if __name__ == '__main__':
    DiscourseHelper()
